--- STEP 1: Basic Exploration
--- Given the data supplied through Uber Eats, we know both the total customer fare and the amount that was paid the Driver
--- Create a coloumn detailing the amount that Uber Eats made off each order (in dollars)
--- Create a separate column showing how much of the customer's fare went to the driver, percentage-wise

SELECT 
  order_id, 
  created, 
  delivered, 
  distance_miles, 
  store_id, 
  est_payout, 
  total_tip, 
  payout, 
  customer_fare,
  ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
  ROUND((customer_fare - payout),2) AS ubers_revenue,
  deliveries, status
FROM `Delivery.uber_eats`
ORDER BY order_id



--- On average, how much of the customer's total delivery fare goes to the Driver
--- Provide the amount of "Delivered" orders for context


WITH financial_split AS 
  (
    SELECT 
      order_id, 
      created, 
      delivered, 
      distance_miles, 
      store_id, 
      est_payout, 
      total_tip, 
      payout, 
      customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      deliveries, 
      status
    FROM `Delivery.uber_eats`
    ORDER BY order_id
  )
SELECT
  ROUND(AVG(percent_drivers_cut),2) AS avg_drivers_cut_percentage,
  COUNT(order_id) AS num_of_orders
FROM financial_split
WHERE status = "Delivered"



--- Order 475 has what looks like a clerical error
--- Payout jumped from an estimated $7.75 to $67.75 after delivery, with only a $3.50 tip. Fix error
--- Side Note: This error has been permanently fixed at the source, since writing this query


UPDATE 
  Delivery.uber_eats
SET 
  payout = 7.75
WHERE order_id = 475



--- Detail the orders that resulted in a net loss for Uber Eats


SELECT 
  order_id, created, delivered, distance_miles, store_id, est_payout, total_tip, payout, customer_fare,
  ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
  ROUND((customer_fare - payout),2) AS ubers_revenue,
  deliveries, status
FROM `Delivery.uber_eats`
WHERE (customer_fare - payout) < 0
ORDER BY order_id



--- Calculate the number of orders that resulted in a net loss for Uber Eats 
--- And calculate the average amount lost per order on those orders


WITH financial_split AS 
  (
    SELECT 
      order_id, created, delivered, distance_miles, store_id, est_payout, total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      deliveries, status
    FROM `Delivery.uber_eats`
    WHERE (customer_fare - payout) < 0
    ORDER BY order_id
  )
SELECT
  COUNT(order_id) AS num_of_losses,
  ROUND(AVG(ubers_revenue),2) AS avg_loss
FROM uber_loss



--- STEP 2:
--- Let's consider wider trends
--- Figure out payment split by month, to see if itâ€™s trending in a certain direction


WITH financial_split AS 
  (
    SELECT 
      order_id, created, delivered, distance_miles, store_id, est_payout, total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      deliveries, status
    FROM `Delivery.uber_eats`
    WHERE status = "Delivered"
  )
SELECT
  CASE
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 1 THEN "Jan"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 2 THEN "Feb"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 3 THEN "Mar"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 4 THEN "Apr"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 5 THEN "May"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 6 THEN "Jun"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 7 THEN "Jul"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 8 THEN "Aug"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 9 THEN "Sep"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 10 THEN "Oct"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 11 THEN "Nov"
    WHEN EXTRACT(Month FROM TIMESTAMP(delivered)) = 12 THEN "Dec"
  END month,
  EXTRACT(Year FROM TIMESTAMP(delivered)) AS year,
  SUM(deliveries) AS num_of_deliveries,
  ROUND(((SUM(payout))/(SUM(customer_fare))*100),2) AS percent_of_drivers_cut,
  ROUND(SUM(ubers_revenue),2) AS uber_income,
  ROUND(SUM(payout),2) AS driver_income
FROM financial_split
GROUP BY year, month;



--- Breakdown changes to payment distribution based on how many orders are part of a single "Delivery" (ie, single vs batched)


WITH financial_split AS
  (
    SELECT 
      deliveries,
      payout AS driver_income,
      ROUND((customer_fare - payout),2) AS ue_income,
      customer_fare
    FROM `Delivery.uber_eats`
    WHERE status = "Delivered"
    AND deliveries IS NOT NULL
  )
SELECT
  deliveries AS orders_in_batch,
  ROUND(SUM(driver_income),2) AS total_driver_income,
  ROUND(AVG(driver_income),2) AS avg_driver_income,
  ROUND((SUM(driver_income)/SUM(customer_fare)*100),1) AS percent_driver_income,
  ROUND(SUM(ue_income),2) AS total_ue_income,
  ROUND(AVG(ue_income),2) AS avg_ue_income,
  ROUND((SUM(ue_income)/SUM(customer_fare)*100),1) AS percent_ue_income,
  COUNT(deliveries) AS num_of_orders
FROM financial_split
GROUP BY deliveries



--- Consider possibility of payout-to-mileage trends (ie do orders with higher miles result in higher pay)


WITH mileage AS
  (
    SELECT 
      distance_miles,
      total_tip,
      payout,
      (payout-total_tip) AS uber_pay
    FROM `Delivery.uber_eats`
    WHERE status = "Delivered"
    AND distance_miles IS NOT NULL
    ORDER BY distance_miles DESC
  ),
miles_case AS
  (
    SELECT
      *,
      CASE
        WHEN distance_miles >= 20 THEN 20
        WHEN distance_miles >= 15 THEN 15
        WHEN distance_miles >= 10 THEN 10
        WHEN distance_miles >= 5 THEN 5
        WHEN distance_miles > 1 THEN 1
        ELSE 0
      END miles
    FROM mileage
  )
SELECT
  miles,
  ROUND(AVG(total_tip),2) AS avg_tip,
  ROUND(AVG(payout),2) AS avg_pay,
  ROUND(AVG(uber_pay),2) AS avg_paid_by_uber
FROM miles_case
GROUP BY miles
ORDER BY miles DESC



--- Take a look at Driver Pay compared to Uber Eats pay


WITH payment_info AS
  (
    SELECT 
      order_id,
      distance_miles,
      est_payout,
      total_tip,
      payout,
      ROUND((payout - total_tip),2) AS uber_pay,
      deliveries
    FROM `Delivery.uber_eats`
    WHERE status = "Delivered"
    ORDER BY order_id DESC
  ),
basic_calculations AS 
  (
    SELECT
      order_id,
      ROUND(((uber_pay/payout)*100),1) AS percent_uber_pay,
      ROUND(((total_tip/payout)*100),1) AS percent_tip,
      distance_miles,
      payout,
      total_tip,
      deliveries
    FROM payment_info
    WHERE uber_pay <> 0
    ORDER BY percent_uber_pay DESC
  ),
filters AS 
  (
    SELECT
      CASE
        WHEN percent_uber_pay = 100 THEN "100"
        WHEN percent_uber_pay >= 85 THEN "85+"
        WHEN percent_uber_pay >= 75 THEN "75 - 85"
        WHEN percent_uber_pay >= 50 THEN "50 - 74"
        WHEN percent_uber_pay >= 30 THEN "30 - 49"
        WHEN percent_uber_pay >= 15 THEN "15 - 29"
        WHEN percent_uber_pay < 15 THEN "Less than 15"
        END uber_percentage,
      *
    FROM basic_calculations 
  )
SELECT
  uber_percentage,
  ROUND(AVG(distance_miles),2) AS avg_miles,
  ROUND(AVG(payout),2) AS avg_pay,
  ROUND(AVG(total_tip),2) AS avg_tip,
  ROUND(AVG(deliveries),2) AS avg_deliveries
FROM filters
GROUP BY uber_percentage
ORDER BY uber_percentage DESC



--- Breakdown stats by City

WITH compiled AS 
  (
    SELECT
      order_id,
      EXTRACT(Date FROM delivered) AS days,
      (delivered - created) AS customer_wait_time,
      distance_miles,
      store_name,
      city,
      est_payout,
      total_tip,
      payout,
      category,
      status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON ue.store_id = s.store_id
    WHERE delivered IS NOT NULL
    ORDER BY customer_wait_time DESC
  )
SELECT
  city,
  ROUND(AVG(distance_miles),1) AS avg_mileage,
  ROUND(AVG(payout),2) AS avg_pay,
  AVG(customer_wait_time) AS avg_cust_wait,
  COUNT(order_id) AS orders_received,
  COUNT(DISTINCT(days)) AS num_of_days_in_area
FROM compiled
GROUP BY city
ORDER BY orders_received DESC



--- Drill Down further on stats by city


WITH compiled AS 
  (
    SELECT
      order_id,
      EXTRACT(Date FROM delivered) AS days,
      (delivered - created) AS customer_wait_time,
      distance_miles,
      store_name,
      city,
      est_payout,
      total_tip,
      payout,
      category,
      status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON ue.store_id = s.store_id
    WHERE delivered IS NOT NULL
    ORDER BY customer_wait_time DESC
  ),
aggregated AS
  (
    SELECT
      city,
      ROUND(AVG(distance_miles),1) AS avg_mileage,
      ROUND(AVG(payout),2) AS avg_pay,
      AVG(customer_wait_time) AS avg_cust_wait,
      COUNT(order_id) AS orders_received,
      COUNT(DISTINCT(days)) AS num_of_days_in_area
    FROM compiled
    GROUP BY city
    ORDER BY orders_received DESC
  )
SELECT
  city,
  ROUND((avg_pay/(EXTRACT(minute FROM avg_cust_wait))),2) AS 
    dollars_per_minute,
  ROUND((orders_received/num_of_days_in_area),1) AS orders_per_day,
  ROUND((avg_pay/avg_mileage),2) AS dollars_per_mile
FROM aggregated



--- Stats by Order Type 


WITH compiled AS
  (
    SELECT 
      order_id, created, store_name, city, est_payout, delivered, distance_miles,
      EXTRACT(minute FROM(delivered - created)) AS customer_wait_time, 
      total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      type, deliveries, status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON s.store_id = ue.store_id
    ORDER BY order_id
  )
SELECT 
  type,
  COUNT(order_id) AS num_of_orders,
  ROUND(AVG(customer_wait_time)) AS avg_cust_wait,
  ROUND(SUM(payout),2) AS driver_income,
  ROUND(SUM(ubers_revenue),2) AS avg_uber_revenue, 
  ROUND(AVG(distance_miles),1) AS avg_miles
FROM compiled
GROUP BY type



--- Further breakdown, showing most profitable types of orders for both driver and uber


WITH compiled AS
  (
    SELECT 
      order_id, created, store_name, city, est_payout, delivered, distance_miles,
      EXTRACT(minute FROM(delivered - created)) AS customer_wait_time, 
      total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      type, deliveries, status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON s.store_id = ue.store_id
    ORDER BY order_id
  ),
next AS 
  (
    SELECT 
      type,
      COUNT(order_id) AS num_of_orders,
      ROUND(AVG(customer_wait_time)) AS avg_cust_wait,
      ROUND(SUM(payout),2) AS driver_income,
      ROUND(SUM(ubers_revenue),2) AS avg_uber_revenue, 
      ROUND(AVG(distance_miles),1) AS avg_miles
    FROM compiled
    GROUP BY type
  )
SELECT 
  type,
  ROUND((driver_income/num_of_orders),2) AS avg_per_order,
  ROUND((avg_uber_revenue/num_of_orders),2) AS ubers_avg_per_order,
  avg_cust_wait,
  avg_miles
FROM next
WHERE num_of_orders > 1



--- Most popular Restaurants

WITH compiled AS
  (
    SELECT 
      order_id, created, store_name, city, est_payout, delivered, distance_miles,
      EXTRACT(minute FROM(delivered - created)) AS customer_wait_time, 
      total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      type, deliveries, status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON s.store_id = ue.store_id
    ORDER BY order_id
  )
SELECT 
  store_name,
  city,
  COUNT(order_id) AS num_of_orders,
  ROUND(AVG(customer_wait_time)) AS avg_cust_wait,
  ROUND(SUM(payout),2) AS driver_income,
  ROUND(SUM(ubers_revenue),2) AS avg_uber_revenue, 
  ROUND(AVG(distance_miles),1) AS avg_miles
FROM compiled
GROUP BY store_name, city
ORDER BY num_of_orders DESC



--- List average income (both driver and uber) by store
--- Include time between order creation and order delivery to give approximate delivery time


WITH compiled AS
  (
    SELECT 
      order_id, created, store_name, city, est_payout, delivered, distance_miles,
      EXTRACT(minute FROM(delivered - created)) AS customer_wait_time, 
      total_tip, payout, customer_fare,
      ROUND(((payout/customer_fare)*100),1) AS percent_drivers_cut,
      ROUND((customer_fare - payout),2) AS ubers_revenue,
      type, deliveries, status
    FROM `Delivery.uber_eats` AS ue
    LEFT JOIN `Delivery.stores` AS s
      ON s.store_id = ue.store_id
    ORDER BY order_id
  ),
aggregates AS
  (
    SELECT 
      store_name,
      city,
      COUNT(order_id) AS num_of_orders,
      ROUND(AVG(customer_wait_time)) AS avg_cust_wait,
      ROUND(SUM(payout),2) AS driver_income,
      ROUND(SUM(ubers_revenue),2) AS avg_uber_revenue, 
      ROUND(AVG(distance_miles),1) AS avg_miles
    FROM compiled
    GROUP BY store_name, city
    ORDER BY num_of_orders DESC
  )
SELECT
  store_name,
  city,
  ROUND((driver_income/num_of_orders),2) AS avg_driver_income_per_order,
  avg_cust_wait,
  ROUND((avg_uber_revenue/num_of_orders),2) AS avg_uber_rev_per_order
FROM aggregates



